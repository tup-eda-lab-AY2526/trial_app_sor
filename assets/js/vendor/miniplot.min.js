(function(){
  function minmax(arr){var mn=Infinity,mx=-Infinity;for(var i=0;i<arr.length;i++){var v=arr[i];if(v<mn)mn=v;if(v>mx)mx=v;}return [mn,mx];}
  function collectExtent(series,fills){var xs=[],ys=[];series.forEach(function(s){if(s && s.x && s.y){xs=xs.concat(s.x);ys=ys.concat(s.y);}});(fills||[]).forEach(function(f){if(f && f.lower && f.upper){xs=xs.concat(f.lower.x||[], f.upper.x||[]);ys=ys.concat(f.lower.y||[], f.upper.y||[]);}});if(xs.length===0||ys.length===0){return {x:[0,1],y:[0,1]};}var xm=minmax(xs), ym=minmax(ys); if(xm[0]===xm[1]){xm[1]=xm[0]+1;} if(ym[0]===ym[1]){ym[1]=ym[0]+1;} return {x:xm,y:ym};}
  function niceTicks(min,max,count){var span=max-min; if(span<=0){return [min];} var step=Math.pow(10,Math.floor(Math.log10(span/count))); var err=span/(count*step); if(err>5){step*=10;} else if(err>2){step*=5;} else if(err>1){step*=2;} var start=Math.ceil(min/step)*step; var ticks=[]; for(var v=start; v<=max+1e-9; v+=step){ticks.push(+v.toFixed(12));} return ticks;}
  function drawAxes(ctx,b,pad,ext,opts){var w=ctx.canvas.width, h=ctx.canvas.height;
    ctx.save(); ctx.strokeStyle='#999'; ctx.lineWidth=1; ctx.beginPath(); ctx.moveTo(pad.left, h-pad.bottom); ctx.lineTo(w-pad.right, h-pad.bottom); ctx.moveTo(pad.left, pad.top); ctx.lineTo(pad.left, h-pad.bottom); ctx.stroke();
    ctx.fillStyle='#555'; ctx.font='12px system-ui, sans-serif'; ctx.textAlign='center'; ctx.textBaseline='top';
    var xTicks=niceTicks(ext.x[0], ext.x[1], 6); for(var i=0;i<xTicks.length;i++){var xv=xTicks[i]; var px=b.x(xv); ctx.strokeStyle='#eee'; ctx.beginPath(); ctx.moveTo(px, pad.top); ctx.lineTo(px, h-pad.bottom); ctx.stroke(); ctx.fillStyle='#555'; ctx.fillText(formatNum(xv), px, h-pad.bottom+4);}
    var yTicks=niceTicks(ext.y[0], ext.y[1], 6); ctx.textAlign='right'; ctx.textBaseline='middle'; for(var j=0;j<yTicks.length;j++){var yv=yTicks[j]; var py=b.y(yv); ctx.strokeStyle='#eee'; ctx.beginPath(); ctx.moveTo(pad.left, py); ctx.lineTo(w-pad.right, py); ctx.stroke(); ctx.fillStyle='#555'; ctx.fillText(formatNum(yv), pad.left-6, py);}
    if(opts && opts.xLabel){ctx.textAlign='center'; ctx.textBaseline='top'; ctx.fillStyle='#222'; ctx.fillText(opts.xLabel, (w-pad.left-pad.right)/2+pad.left, h-2);}
    if(opts && opts.yLabel){ctx.save(); ctx.translate(2, (h-pad.top-pad.bottom)/2+pad.top); ctx.rotate(-Math.PI/2); ctx.textAlign='center'; ctx.textBaseline='top'; ctx.fillStyle='#222'; ctx.fillText(opts.yLabel, 0, 0); ctx.restore();}
    ctx.restore();
  }
  function formatNum(n){var a=Math.abs(n); if(a>=1000||a===0) return n.toFixed(0); if(a>=100) return n.toFixed(1); if(a>=10) return n.toFixed(2); return n.toFixed(3);}
  function buildScaler(ext,w,h,pad){var x0=pad.left, x1=w-pad.right; var y0=h-pad.bottom, y1=pad.top; var sx=(x1-x0)/(ext.x[1]-ext.x[0]); var sy=(y0-y1)/(ext.y[1]-ext.y[0]); return {x:function(v){return x0+(v-ext.x[0])*sx;}, y:function(v){return y0-(v-ext.y[0])*sy;}};}
  function drawLine(ctx,sc,x,y,opts){ctx.save(); ctx.strokeStyle=opts.color||'#000'; ctx.lineWidth=opts.width||1.5; if(opts.dash){ctx.setLineDash(opts.dash);} ctx.beginPath(); for(var i=0;i<x.length;i++){var px=sc.x(x[i]), py=sc.y(y[i]); if(i===0) ctx.moveTo(px,py); else ctx.lineTo(px,py);} ctx.stroke(); ctx.restore();}
  function drawScatter(ctx,sc,x,y,opts){ctx.save(); var r=opts.r||2; ctx.fillStyle=opts.color||'#000'; for(var i=0;i<x.length;i++){var px=sc.x(x[i]), py=sc.y(y[i]); ctx.beginPath(); ctx.arc(px,py,r,0,Math.PI*2); ctx.fill();} ctx.restore();}
  function drawArea(ctx,sc,lower,upper,color){ctx.save(); ctx.fillStyle=color||'rgba(0,0,0,0.1)'; ctx.beginPath(); for(var i=0;i<upper.x.length;i++){var px=sc.x(upper.x[i]), py=sc.y(upper.y[i]); if(i===0) ctx.moveTo(px,py); else ctx.lineTo(px,py);} for(var j=lower.x.length-1;j>=0;j--){var qx=sc.x(lower.x[j]), qy=sc.y(lower.y[j]); ctx.lineTo(qx,qy);} ctx.closePath(); ctx.fill(); ctx.restore();}
  function autoPadding(ctx,ext){ctx.font='12px system-ui, sans-serif'; var yTicks=niceTicks(ext.y[0],ext.y[1],6); var maxW=0; for(var i=0;i<yTicks.length;i++){var t=formatNum(yTicks[i]); var w=ctx.measureText(t).width; if(w>maxW) maxW=w;}
    return {left: Math.max(40, 8+Math.ceil(maxW)), right: 16, top: 12, bottom: 28};
  }
  function plot(canvas, options){var ctx=canvas.getContext('2d'); var series=options.series||[]; var fills=options.fills||[]; var ext=collectExtent(series,fills);
    // add margins
    var ySpan=ext.y[1]-ext.y[0]; var yPad=ySpan*0.08; ext.y=[ext.y[0]-yPad, ext.y[1]+yPad];
    var xSpan=ext.x[1]-ext.x[0]; var xPad=xSpan*0.02; ext.x=[ext.x[0]-xPad, ext.x[1]+xPad];
    var pad=autoPadding(ctx,ext);
    var b=buildScaler(ext, canvas.width, canvas.height, pad);
    ctx.clearRect(0,0,canvas.width,canvas.height);
    drawAxes(ctx,b,pad,ext, options.axes||{});
    // fills first
    for(var i=0;i<fills.length;i++){var f=fills[i]; drawArea(ctx,b,f.lower,f.upper,f.color);}
    // lines
    for(var j=0;j<series.length;j++){var s=series[j]; if(!s || !s.x || !s.y) continue; if(s.type==='scatter'){drawScatter(ctx,b,s.x,s.y,{color:s.color,r:s.r});} else {drawLine(ctx,b,s.x,s.y,{color:s.color,width:s.width,dash:s.dash});}}
  }
  window.MiniPlot={plot:plot};
})();
